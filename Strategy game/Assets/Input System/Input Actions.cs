//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input System/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Unit View"",
            ""id"": ""4c7ff4a9-6b06-4f20-b4bd-d667d46fcfe9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""08570d70-c280-43fc-ab6e-70e7d7bf7154"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Camera"",
                    ""type"": ""Value"",
                    ""id"": ""fd7d263e-fcd1-491a-a986-2e4c6337ed6e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Leave Unit View"",
                    ""type"": ""Button"",
                    ""id"": ""e9cd6310-61d3-4e9a-8756-64fe0ae9cb52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera Select"",
                    ""type"": ""Button"",
                    ""id"": ""ea6add19-4beb-4621-b848-5b16d626b4c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1efc1825-fdf4-4415-8e33-1fea24ca2edc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e9dddf5c-e41c-4bce-a4ef-a35c84c58963"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ab4fac1-c4ea-4594-9f01-7de59704a754"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""39323e4c-8cdc-4ca1-8ddf-e930d149be72"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""546660a1-c236-4831-92af-4c806d0ea2e6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""05a68587-cc4f-449d-b566-e6def344419a"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""879d484e-1cd1-45b7-b9c5-f4745877dcfc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leave Unit View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69f27c21-485d-4f61-8be4-bc5249a7bfaa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map View"",
            ""id"": ""ba698fb1-def0-44fd-8460-a6f3fb450d6c"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""918c2814-d189-47d3-a175-da34324a6441"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""faa234de-089d-4881-b431-90270bf03464"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af768ff9-e3c6-424b-a340-8e9bde18263f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bacf345-8834-4a51-8e7d-633e18b2bd80"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": []
        }
    ]
}");
        // Unit View
        m_UnitView = asset.FindActionMap("Unit View", throwIfNotFound: true);
        m_UnitView_Move = m_UnitView.FindAction("Move", throwIfNotFound: true);
        m_UnitView_MoveCamera = m_UnitView.FindAction("Move Camera", throwIfNotFound: true);
        m_UnitView_LeaveUnitView = m_UnitView.FindAction("Leave Unit View", throwIfNotFound: true);
        m_UnitView_CameraSelect = m_UnitView.FindAction("Camera Select", throwIfNotFound: true);
        // Map View
        m_MapView = asset.FindActionMap("Map View", throwIfNotFound: true);
        m_MapView_Select = m_MapView.FindAction("Select", throwIfNotFound: true);
        m_MapView_Cursor = m_MapView.FindAction("Cursor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Unit View
    private readonly InputActionMap m_UnitView;
    private List<IUnitViewActions> m_UnitViewActionsCallbackInterfaces = new List<IUnitViewActions>();
    private readonly InputAction m_UnitView_Move;
    private readonly InputAction m_UnitView_MoveCamera;
    private readonly InputAction m_UnitView_LeaveUnitView;
    private readonly InputAction m_UnitView_CameraSelect;
    public struct UnitViewActions
    {
        private @InputActions m_Wrapper;
        public UnitViewActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_UnitView_Move;
        public InputAction @MoveCamera => m_Wrapper.m_UnitView_MoveCamera;
        public InputAction @LeaveUnitView => m_Wrapper.m_UnitView_LeaveUnitView;
        public InputAction @CameraSelect => m_Wrapper.m_UnitView_CameraSelect;
        public InputActionMap Get() { return m_Wrapper.m_UnitView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitViewActions set) { return set.Get(); }
        public void AddCallbacks(IUnitViewActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitViewActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
            @LeaveUnitView.started += instance.OnLeaveUnitView;
            @LeaveUnitView.performed += instance.OnLeaveUnitView;
            @LeaveUnitView.canceled += instance.OnLeaveUnitView;
            @CameraSelect.started += instance.OnCameraSelect;
            @CameraSelect.performed += instance.OnCameraSelect;
            @CameraSelect.canceled += instance.OnCameraSelect;
        }

        private void UnregisterCallbacks(IUnitViewActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
            @LeaveUnitView.started -= instance.OnLeaveUnitView;
            @LeaveUnitView.performed -= instance.OnLeaveUnitView;
            @LeaveUnitView.canceled -= instance.OnLeaveUnitView;
            @CameraSelect.started -= instance.OnCameraSelect;
            @CameraSelect.performed -= instance.OnCameraSelect;
            @CameraSelect.canceled -= instance.OnCameraSelect;
        }

        public void RemoveCallbacks(IUnitViewActions instance)
        {
            if (m_Wrapper.m_UnitViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitViewActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitViewActions @UnitView => new UnitViewActions(this);

    // Map View
    private readonly InputActionMap m_MapView;
    private List<IMapViewActions> m_MapViewActionsCallbackInterfaces = new List<IMapViewActions>();
    private readonly InputAction m_MapView_Select;
    private readonly InputAction m_MapView_Cursor;
    public struct MapViewActions
    {
        private @InputActions m_Wrapper;
        public MapViewActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_MapView_Select;
        public InputAction @Cursor => m_Wrapper.m_MapView_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_MapView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapViewActions set) { return set.Get(); }
        public void AddCallbacks(IMapViewActions instance)
        {
            if (instance == null || m_Wrapper.m_MapViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapViewActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Cursor.started += instance.OnCursor;
            @Cursor.performed += instance.OnCursor;
            @Cursor.canceled += instance.OnCursor;
        }

        private void UnregisterCallbacks(IMapViewActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Cursor.started -= instance.OnCursor;
            @Cursor.performed -= instance.OnCursor;
            @Cursor.canceled -= instance.OnCursor;
        }

        public void RemoveCallbacks(IMapViewActions instance)
        {
            if (m_Wrapper.m_MapViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapViewActions instance)
        {
            foreach (var item in m_Wrapper.m_MapViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapViewActions @MapView => new MapViewActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IUnitViewActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnLeaveUnitView(InputAction.CallbackContext context);
        void OnCameraSelect(InputAction.CallbackContext context);
    }
    public interface IMapViewActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
    }
}
